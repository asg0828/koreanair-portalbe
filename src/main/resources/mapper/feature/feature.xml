<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cdp.portal.app.facade.feature.mapper.FeatureMapper">

	<insert id="insert" parameterType="FeatureModel">
		INSERT INTO T_FEATURE (
			FEATURE_ID
			, FEATURE_TYP
			, FEATURE_SE
			, FEATURE_KO_NM
			, FEATURE_EN_NM
			, CALC_UNT
			, FEATURE_DEF
			, FEATURE_FM
			, ENR_USER_ID
			, ENR_DEPT_CODE
			, FEATURE_REL_TB
			, FEATURE_DSC
			, RGST_ID
			, RGST_DT
			, MODI_ID
			, MODI_DT
		) VALUES (
			#{featureId}
			, #{featureTyp}
			, #{featureSe}
			, #{featureKoNm}
			, #{featureEnNm}
			, #{calcUnt}
			, #{featureDef}
			, #{featureFm}
			, #{enrUserId}
			, #{enrDeptCode}
			, #{featureRelTb}
			, #{featureDsc}
			, #{rgstId}
			, now()
			, #{modiId}
			, now()
		)
	</insert>
	
	<select id="isExistsByFeatureKoNm" parameterType="String" resultType="Boolean">
		SELECT EXISTS 
			(
				SELECT 1
				FROM 
					T_FEATURE
				WHERE
					FEATURE_KO_NM = #{featureKoNm}
				AND DEL_YN = 'N'
				LIMIT 1
			)
	</select>
	
	<select id="isExistsByFeatureEnNm" parameterType="String" resultType="Boolean">
		SELECT EXISTS 
			(
				SELECT 1
				FROM 
					T_FEATURE
				WHERE
					FEATURE_EN_NM = #{featureEnNm}
				AND DEL_YN = 'N'
				LIMIT 1
			)
	</select>
	
	<select id="selectAll" resultType="com.cdp.portal.app.facade.feature.dto.response.FeatureResDto$Features">
		SELECT
			F.FEATURE_ID
			, F.FEATURE_TYP
			, F.FEATURE_SE
			, F.FEATURE_KO_NM
			, F.FEATURE_EN_NM
			, F.CALC_UNT
			, F.FEATURE_DEF
			, F.FEATURE_FM
			, F.ENR_USER_ID
			, F.ENR_DEPT_CODE
			, F.FEATURE_REL_TB
			, F.FEATURE_DSC
			, F.DEL_YN
			, F.RGST_ID
			, F.RGST_DT
			, F.MODI_ID
			, F.MODI_DT
		FROM
			T_FEATURE F
		<include refid="selectWhere"/>
	</select>
	
	<select id="selects" resultType="com.cdp.portal.app.facade.feature.dto.response.FeatureResDto$Feature">
		SELECT 
			row_number() OVER (ORDER BY Z.FEATURE_ID ASC) AS row_num
			, Z.*
			, Z.SE_GRP_ID AS featureSeGrp
			, (SELECT SE_NM FROM T_FEATURE_SE WHERE SE_ID = Z.SE_GRP_ID) AS featureSeGrpNm
			, Z.CODE_NM AS featureTypNm
			, Z.SE_NM AS featureSeNm
			, Z.USER_NM AS enrUserNm
			, Z.DEPT_NM AS enrDeptNm
			, CASE WHEN Z.USER_ID IS NULL THEN false ELSE true END AS isUserFeature
		FROM (
			SELECT
				F.FEATURE_ID
				, F.FEATURE_TYP
				, C.CODE_NM
				, SE.SE_GRP_ID
				, F.FEATURE_SE
				, SE.SE_NM
				, F.FEATURE_KO_NM
				, F.FEATURE_EN_NM
				, F.CALC_UNT
				, F.FEATURE_DEF
				, F.FEATURE_FM
				, F.ENR_USER_ID
				, F.ENR_DEPT_CODE
				, D.DEPT_NM
				, U.USER_NM
				, F.FEATURE_REL_TB
				, F.FEATURE_DSC
				, F.DEL_YN
				, F.RGST_ID
				, F.RGST_DT
				, F.MODI_ID
				, F.MODI_DT
				, UF.USER_ID
			FROM
				T_FEATURE F
				LEFT JOIN T_USER U
					ON F.ENR_USER_ID = U.USER_ID
				LEFT JOIN T_DEPT D
					ON F.ENR_DEPT_CODE = D.DEPT_CODE
				LEFT JOIN T_FEATURE_SE SE 
					ON F.FEATURE_SE = SE.SE_ID
				LEFT JOIN T_CODE C 
					ON F.FEATURE_TYP = C.CODE_ID
				LEFT JOIN T_USER_FEATURE UF 
					ON F.FEATURE_ID = UF.FEATURE_ID AND UF.USER_ID = #{userId}
			<include refid="selectWhere"/>
		) Z
		<include refid="paging.pagingOffsetSQL" />
	</select>
	
	<select id="selectCount" resultType="int">
		SELECT
			COUNT(*) AS cnt
		FROM
			T_FEATURE F
			LEFT JOIN T_USER U
				ON F.ENR_USER_ID = U.USER_ID
			LEFT JOIN T_DEPT D
				ON F.ENR_DEPT_CODE = D.DEPT_CODE
			LEFT JOIN T_FEATURE_SE SE 
				ON F.FEATURE_SE = SE.SE_ID
			LEFT JOIN T_CODE C 
				ON F.FEATURE_TYP = C.CODE_ID
		<include refid="selectWhere"/>
	</select>
	
	<sql id="selectWhere">
		<where>
			F.DEL_YN = 'N'
			<if test="search.featureSeGrp != null and search.featureSeGrp != '' and (search.featureSe == null or search.featureSe == '')">
            	AND F.FEATURE_SE IN (
            		SELECT SE_ID 
            		FROM T_FEATURE_SE 
            		WHERE SE_GRP_ID = #{search.featureSeGrp}
            	) 
            </if>
            <if test="search.featureSeGrp != null and search.featureSeGrp != '' and search.featureSe != null and search.featureSe != ''">
            	AND F.FEATURE_SE = #{search.featureSe}
            </if>
            <if test="search.featureKoNm != null and search.featureKoNm != ''">
            	AND F.FEATURE_KO_NM = #{search.featureKoNm}
            </if>
            <if test="search.featureEnNm != null and search.featureEnNm != ''">
            	AND F.FEATURE_EN_NM = #{search.featureEnNm}
            </if>
			<if test="search.enrUserId != null and search.enrUserId != ''">
            	AND F.ENR_USER_ID = #{search.enrUserId}
            </if>
            <if test="search.enrDeptCode != null and search.enrDeptCode != ''">
            	AND F.ENR_DEPT_CODE = #{search.enrDeptCode}
            </if>
            <if test="search.searchFeature != null and search.searchFeature != ''">
				AND (1 != 1
				<foreach collection="search.searchConditions" item="dataSet" index="index">
					<if test="dataSet != null and dataSet == 'featureKoNm'">
                		OR F.FEATURE_KO_NM LIKE '%' || #{search.searchFeature} || '%'
                	</if>
                	<if test="dataSet != null and dataSet == 'featureEnNm'">
                		OR F.FEATURE_EN_NM LIKE '%' || #{search.searchFeature} || '%'
                	</if>
                	<if test="dataSet != null and dataSet == 'featureDef'">
                		OR F.FEATURE_DEF LIKE '%' || #{search.searchFeature} || '%'
                	</if>
				</foreach>
				)
			</if>
		</where>
	</sql>
	
	<select id="selectByFeatureId" resultType="com.cdp.portal.app.facade.feature.dto.response.FeatureResDto$Feature">
		SELECT
			FEATURE_ID
			, FEATURE_TYP
			, FEATURE_SE
			, FEATURE_KO_NM
			, FEATURE_EN_NM
			, CALC_UNT
			, FEATURE_DEF
			, FEATURE_FM
			, ENR_USER_ID
			, ENR_DEPT_CODE
			, FEATURE_REL_TB
			, FEATURE_DSC
			, DEL_YN
			, RGST_ID
			, RGST_DT
			, MODI_ID
			, MODI_DT
		FROM
			T_FEATURE
		WHERE
			FEATURE_ID = #{featureId}
	</select>
	
	<select id="selectByFeatureIdAndUserId" resultType="com.cdp.portal.app.facade.feature.dto.response.FeatureResDto$Feature">
		SELECT 
			Z.*
			, Z.SE_GRP_ID AS featureSeGrp
			, (SELECT SE_NM FROM T_FEATURE_SE WHERE SE_ID = Z.SE_GRP_ID) AS featureSeGrpNm
			, Z.CODE_NM AS featureTypNm
			, Z.SE_NM AS featureSeNm
			, Z.USER_NM AS enrUserNm
			, Z.DEPT_NM AS enrDeptNm
			, CASE WHEN Z.USER_ID IS NULL THEN false ELSE true END AS isUserFeature
		FROM (
			SELECT
				F.FEATURE_ID
				, F.FEATURE_TYP
				, C.CODE_NM
				, SE.SE_GRP_ID
				, F.FEATURE_SE
				, SE.SE_NM
				, F.FEATURE_KO_NM
				, F.FEATURE_EN_NM
				, F.CALC_UNT
				, F.FEATURE_DEF
				, F.FEATURE_FM
				, F.ENR_USER_ID
				, F.ENR_DEPT_CODE
				, D.DEPT_NM
				, U.USER_NM
				, F.FEATURE_REL_TB
				, F.FEATURE_DSC
				, F.DEL_YN
				, F.RGST_ID
				, F.RGST_DT
				, F.MODI_ID
				, F.MODI_DT
				, UF.USER_ID
			FROM
				T_FEATURE F
				LEFT JOIN T_USER U
					ON F.ENR_USER_ID = U.USER_ID
				LEFT JOIN T_DEPT D
					ON F.ENR_DEPT_CODE = D.DEPT_CODE
				LEFT JOIN T_FEATURE_SE SE 
					ON F.FEATURE_SE = SE.SE_ID
				LEFT JOIN T_CODE C 
					ON F.FEATURE_TYP = C.CODE_ID
				LEFT JOIN T_USER_FEATURE UF 
					ON F.FEATURE_ID = UF.FEATURE_ID AND UF.USER_ID = #{userId}
			WHERE
				F.FEATURE_ID = #{featureId}
		) Z
	</select>
	
	<update id="update" parameterType="FeatureModel">
		UPDATE
			T_FEATURE
		SET
			FEATURE_TYP = #{featureTyp}
			, FEATURE_SE = #{featureSe}
			, FEATURE_KO_NM = #{featureKoNm}
			, FEATURE_EN_NM = #{featureEnNm}
			, CALC_UNT = #{calcUnt}
			, FEATURE_DEF = #{featureDef}
			, FEATURE_FM = #{featureFm}
			, ENR_USER_ID = #{enrUserId}
			, ENR_DEPT_CODE = #{enrDeptCode}
			, FEATURE_REL_TB = #{featureRelTb}
			, FEATURE_DSC = #{featureDsc}
			, MODI_ID = #{modiId}
			, MODI_DT = now()
		WHERE
			FEATURE_ID = #{featureId}
	</update>
	
	<update id="updateDelYnByFeatureId" parameterType="String">
		UPDATE
			T_FEATURE
		SET
			DEL_YN = 'Y'
			, MODI_ID = #{modiId}
			, MODI_DT = now()
		WHERE
			FEATURE_ID = #{featureId}
	</update>

</mapper>